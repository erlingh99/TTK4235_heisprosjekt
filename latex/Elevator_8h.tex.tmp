\hypertarget{Elevator_8h}{}\doxysection{source/\+Elevator.h File Reference}
\label{Elevator_8h}\index{source/Elevator.h@{source/Elevator.h}}


File describing the elevator type and helping types.  


{\ttfamily \#include \char`\"{}hardware.\+h\char`\"{}}\newline
{\ttfamily \#include $<$stdbool.\+h$>$}\newline
Include dependency graph for Elevator.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsection*{Data Structures}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structElevator}{Elevator}}
\begin{DoxyCompactList}\small\item\em {\ttfamily \mbox{\hyperlink{structElevator}{Elevator}}} describes the elevator. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{Elevator_8h_a98fe138c54a0228ad7bbc543647c7ea0}\label{Elevator_8h_a98fe138c54a0228ad7bbc543647c7ea0}} 
\#define {\bfseries door\+Time}~3
\end{DoxyCompactItemize}
\doxysubsection*{Enumerations}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{Elevator_8h_ada8a6679b36fc4f29442334494afb588}\label{Elevator_8h_ada8a6679b36fc4f29442334494afb588}} 
enum \mbox{\hyperlink{Elevator_8h_ada8a6679b36fc4f29442334494afb588}{Elevator\+State}} \{ {\bfseries I\+N\+IT}, 
{\bfseries I\+D\+LE}, 
{\bfseries M\+O\+V\+I\+NG}, 
{\bfseries S\+T\+O\+P\+P\+ED}
 \}
\begin{DoxyCompactList}\small\item\em {\ttfamily enum} Elevator\+State describes the state the elevator is in. Available states are I\+N\+IT, I\+D\+LE, M\+O\+V\+I\+NG and S\+T\+O\+P\+P\+ED. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{Elevator_8h_a117f8df7c03b73093e6da94ae41b4252}\label{Elevator_8h_a117f8df7c03b73093e6da94ae41b4252}} 
enum \mbox{\hyperlink{Elevator_8h_a117f8df7c03b73093e6da94ae41b4252}{Door\+State}} \{ {\bfseries O\+P\+EN}, 
{\bfseries C\+L\+O\+S\+ED}
 \}
\begin{DoxyCompactList}\small\item\em {\ttfamily enum} Door\+State describes the state the elevator door is in. Available states are O\+P\+EN and C\+L\+O\+S\+ED. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\hyperlink{structElevator}{Elevator}} $\ast$ \mbox{\hyperlink{Elevator_8h_a3805e6ff5995c96daa887456c7df2910}{init\+Elevator}} ()
\begin{DoxyCompactList}\small\item\em Initialises the elevator. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{Elevator_8h_a612ea77b3186a5cf583a70989f5feac3}{del\+Elevator}} (\mbox{\hyperlink{structElevator}{Elevator}} $\ast$p\+\_\+elevator)
\begin{DoxyCompactList}\small\item\em Frees the memory occupied by the elevator pointed to by {\ttfamily p\+\_\+elevator}. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{Elevator_8h_a1389dedff7d14a786f804aea64460722}{open\+Door}} (\mbox{\hyperlink{structElevator}{Elevator}} $\ast$p\+\_\+elevator)
\begin{DoxyCompactList}\small\item\em Tries to open the door of elevator pointed to by {\ttfamily p\+\_\+elevator}. If the elevator is not at a floor, the function fails. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{Elevator_8h_a906b4b86c692ca1698257f8c2e569acd}{close\+Door}} (\mbox{\hyperlink{structElevator}{Elevator}} $\ast$p\+\_\+elevator)
\begin{DoxyCompactList}\small\item\em Tries to clos the door of elevator pointed to by {\ttfamily p\+\_\+elevator}. If it is already closed, this function does nothing. If the timeout specified in {\ttfamily p\+\_\+elevator-\/$>$door\+Open\+Time} has not passed, the function fails. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{Elevator_8h_a98963d84323ab1da4f14dec257420d0d}{at\+Floor}} ()
\begin{DoxyCompactList}\small\item\em Checks if the elevator is at a floor. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
File describing the elevator type and helping types. 



\doxysubsection{Function Documentation}
\mbox{\Hypertarget{Elevator_8h_a98963d84323ab1da4f14dec257420d0d}\label{Elevator_8h_a98963d84323ab1da4f14dec257420d0d}} 
\index{Elevator.h@{Elevator.h}!atFloor@{atFloor}}
\index{atFloor@{atFloor}!Elevator.h@{Elevator.h}}
\doxysubsubsection{\texorpdfstring{atFloor()}{atFloor()}}
{\footnotesize\ttfamily int at\+Floor (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Checks if the elevator is at a floor. 

\begin{DoxyReturn}{Returns}
1 if yes, 0 if not 
\end{DoxyReturn}


Definition at line 67 of file Elevator.\+c.

\mbox{\Hypertarget{Elevator_8h_a906b4b86c692ca1698257f8c2e569acd}\label{Elevator_8h_a906b4b86c692ca1698257f8c2e569acd}} 
\index{Elevator.h@{Elevator.h}!closeDoor@{closeDoor}}
\index{closeDoor@{closeDoor}!Elevator.h@{Elevator.h}}
\doxysubsubsection{\texorpdfstring{closeDoor()}{closeDoor()}}
{\footnotesize\ttfamily int close\+Door (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structElevator}{Elevator}} $\ast$}]{p\+\_\+elevator }\end{DoxyParamCaption})}



Tries to clos the door of elevator pointed to by {\ttfamily p\+\_\+elevator}. If it is already closed, this function does nothing. If the timeout specified in {\ttfamily p\+\_\+elevator-\/$>$door\+Open\+Time} has not passed, the function fails. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in,out}}  & {\em p\+\_\+elevator} & Pointer to the elevator which door shall be closed \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
{\ttfamily int} indicating success (0) or failure (1) 
\end{DoxyReturn}


Definition at line 52 of file Elevator.\+c.

\mbox{\Hypertarget{Elevator_8h_a612ea77b3186a5cf583a70989f5feac3}\label{Elevator_8h_a612ea77b3186a5cf583a70989f5feac3}} 
\index{Elevator.h@{Elevator.h}!delElevator@{delElevator}}
\index{delElevator@{delElevator}!Elevator.h@{Elevator.h}}
\doxysubsubsection{\texorpdfstring{delElevator()}{delElevator()}}
{\footnotesize\ttfamily void del\+Elevator (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structElevator}{Elevator}} $\ast$}]{p\+\_\+elevator }\end{DoxyParamCaption})}



Frees the memory occupied by the elevator pointed to by {\ttfamily p\+\_\+elevator}. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in,out}}  & {\em p\+\_\+elevator} & Pointer to the elevator to delete \\
\hline
\end{DoxyParams}


Definition at line 30 of file Elevator.\+c.

\mbox{\Hypertarget{Elevator_8h_a3805e6ff5995c96daa887456c7df2910}\label{Elevator_8h_a3805e6ff5995c96daa887456c7df2910}} 
\index{Elevator.h@{Elevator.h}!initElevator@{initElevator}}
\index{initElevator@{initElevator}!Elevator.h@{Elevator.h}}
\doxysubsubsection{\texorpdfstring{initElevator()}{initElevator()}}
{\footnotesize\ttfamily \mbox{\hyperlink{structElevator}{Elevator}}$\ast$ init\+Elevator (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Initialises the elevator. 

\begin{DoxyReturn}{Returns}
{\ttfamily Elevator$\ast$} pointer to the elevator struct. 
\end{DoxyReturn}
\begin{DoxyWarning}{Warning}
The returned elevator is not in a consistent state 
\end{DoxyWarning}


Definition at line 7 of file Elevator.\+c.

\mbox{\Hypertarget{Elevator_8h_a1389dedff7d14a786f804aea64460722}\label{Elevator_8h_a1389dedff7d14a786f804aea64460722}} 
\index{Elevator.h@{Elevator.h}!openDoor@{openDoor}}
\index{openDoor@{openDoor}!Elevator.h@{Elevator.h}}
\doxysubsubsection{\texorpdfstring{openDoor()}{openDoor()}}
{\footnotesize\ttfamily int open\+Door (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structElevator}{Elevator}} $\ast$}]{p\+\_\+elevator }\end{DoxyParamCaption})}



Tries to open the door of elevator pointed to by {\ttfamily p\+\_\+elevator}. If the elevator is not at a floor, the function fails. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in,out}}  & {\em p\+\_\+elevator} & Pointer to the elevator which door shall be opened \\
\hline
\end{DoxyParams}
\begin{DoxyWarning}{Warning}
Never call this function while the elevator is moving. 
\end{DoxyWarning}
\begin{DoxyReturn}{Returns}
{\ttfamily int} indicating success (0) or failure (1) 
\end{DoxyReturn}


Definition at line 40 of file Elevator.\+c.

